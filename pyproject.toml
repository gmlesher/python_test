[project]
name = "python_test"
version = "0.0.1"
requires-python = ">=3.13"
description = "The best python project ever."
# readme = ""

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.13
target-version = "py313"

[tool.ruff.lint]
select = [
    # flake8-bugbear - Non-PEP but sensible rules
    "B",
    # mccabe - Code complexity analysis
    "C901",
    # Pydocstyle - Require docstrings
    "D",
    # pycodestyle - PEP8 styles
    "E",
    # Eradicate - Flag commented code
    "ERA", 
    # Pyflakes
    "F",
    # iSort - Sort and group imports
    "I",
    # flake8-simplify - Code simplification
    "SIM",
    # pyupgrade - Upgrade syntax for new versions of python
    "UP",
    # pycodestyle - New lines and whitespace rules
    "W",
]
# Ignore rules from above parents that conflict with the Ruff formatter
ignore = [
    "D206",
    "D300",
    "E111",
    "E114",
    "E117",
    "W191",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Enable linting for "unstable" rules
preview = true

[tool.ruff.lint.mccabe]
# Max code complexity of 6
max-complexity = 6

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

# Enable formatting for "unstable" rules
preview = true

